#!/usr/bin/env python

import os
import sys
import time
import datetime
import locale
import urllib2
import argparse
import psycopg2
from stem import Signal
from stem.control import Controller

sys.path.append ('googleplay_api')
from googleplay import GooglePlayAPI, LoginError

class GPDETAILS:

    def __init__(self, args):

        self.__androidid = args.androidid
        self.__tokenurl = args.token
        self.__tor = args.tor
        # FIMXE: Make configurable. Play store seems to return ~600 apps per query.
        self.__packages_per_query = 1000
        self.verbose   = args.verbose

        # Set locale such that parsing of download numbers works. Note, that
        # this must be changed consistently with the lang value below.
        locale.setlocale(locale.LC_ALL, 'en_US.utf8')

        if self.__tor:
            self.__proxies = { 'http': 'socks5://localhost:9050', 'https': 'socks5://localhost:9050' }

            self.__controller = Controller.from_socket_file()
            self.__controller.authenticate()
            if self.verbose:
                print ("[gpapi] Tor version %s" % self.__controller.get_version())
            self.new_circuit()

        else:
            self.__proxies = None

        self.login()

        self.__conn = psycopg2.connect('dbname=%s user=%s' % (args.dbname, args.dbuser))
        self.__cur = self.__conn.cursor()

        table = '''
            CREATE TABLE IF NOT EXISTS details
            (
                details_appDetails_packageName      TEXT,
                details_appDetails_versionCode      INTEGER,
                descriptionHtml                     TEXT,
                details_appDetails_developerName    TEXT,
                details_appDetails_versionString    TEXT,
                details_appDetails_permissions      TEXT,
                details_appDetails_developerEmail   TEXT,
                details_appDetails_developerWebsite TEXT,
                details_appDetails_appType          TEXT,
                crawlDate                           TIMESTAMP,
                PRIMARY KEY(details_appDetails_packageName, details_appDetails_versionCode)
            )
        '''
        self.__cur.execute(table)
        self.__conn.commit()


    def new_circuit(self):
        newnym_delay = self.__controller.get_newnym_wait()
        time.sleep(newnym_delay + 5)
        self.__controller.signal(Signal.NEWNYM)

    def login(self):

        self.__api = GooglePlayAPI(androidId = self.__androidid, lang = 'en_us', proxies = self.__proxies)

        if self.verbose:
            print ("[gpapi] Fetching token from '%s'" % (self.__tokenurl,))
        self.token = urllib2.urlopen(self.__tokenurl).read()
        if self.verbose:
            print ("[gpapi] Logging in with token '%s'" % (self.token))
        self.__api.login(None, None, self.token)


    def app_ids(self):

        self.__cur.execute('SELECT apps.details_appdetails_packagename FROM apps LEFT JOIN details ON apps.details_appdetails_packagename = details.details_appdetails_packagename AND apps.details_appdetails_versioncode = details.details_appdetails_versioncode WHERE details.details_appdetails_packagename IS NULL AND random() < 0.001')
        result = [(result[0]) for result in self.__cur.fetchall()]
        return result[0:self.__packages_per_query]

    def insert(self, result):

        ad = result.details.appDetails
        of = result.offer[0]

        try:
            upload_date = datetime.datetime.strptime(ad.uploadDate, "%b %d, %Y")
        except:
            upload_date = 'null'

        num_downloads = locale.atoi(ad.numDownloads.rstrip('+'))
        querystring = '''
            INSERT INTO apps VALUES
                (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,
                 %s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,now())
            ON CONFLICT DO NOTHING
        '''

        querydata = \
            ('details',
             result.docid,
             result.title,
             result.creator,
             of.micros,
             of.currencyCode,
             of.formattedAmount,
             of.checkoutFlowRequired,
             of.offerType,
             ad.versionCode,
             ad.installationSize,
             num_downloads,
             ad.packageName,
             upload_date.date(),
             ad.file[0].fileType,
             ad.file[0].versionCode,
             ad.file[0].size,
             result.aggregateRating.type,
             result.aggregateRating.starRating,
             result.aggregateRating.ratingsCount,
             result.aggregateRating.oneStarRatings,
             result.aggregateRating.twoStarRatings,
             result.aggregateRating.threeStarRatings,
             result.aggregateRating.fourStarRatings,
             result.aggregateRating.fiveStarRatings,
             result.aggregateRating.commentCount,
             result.detailsUrl,
             result.shareUrl,
             result.detailsReusable,
             0)

        try:
            self.__cur.execute(querystring, querydata)
        except psycopg2.DataError as e:
            print ("Data error: %s for query %s" % (str(e), str(querydata)))

        querystring = '''
            INSERT INTO details VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,now()) ON CONFLICT DO NOTHING
        '''

        permissions = [str(perm) for perm in ad.permission]

        querydata = \
            (ad.packageName,
             ad.versionCode,
             result.descriptionHtml,
             ad.developerName,
             ad.versionString,
             ",".join(permissions),
             ad.developerEmail,
             ad.developerWebsite,
             ad.appType)

        try:
            self.__cur.execute(querystring, querydata)
        except psycopg2.DataError as e:
            print ("Data error: %s for query %s" % (str(e), str(querydata)))

        self.__conn.commit()

    def details(self):

        while True:

            start_time = time.time()

            packages = self.app_ids()
            if not packages:
                print("No more packages, exiting")
                return

            num_results = 0
            print ("Requesting details for %d packages" % (len(packages)))

            for entry in self.__api.bulkDetails(packages).entry:

                if not entry or not entry.doc or not entry.doc.docid:
                    continue

                try:
                    self.insert(entry.doc)
                except Exception as e:
                    print(str(e))
                    time.sleep(1)

                num_results += 1

            rate = 60 * num_results / (time.time() - start_time)
            print("Stored %d results, %2.1f packages per minute" % (num_results, rate))

            if self.__tor and num_results < 10:
                self.new_circuit()
                self.login()

def main():

    parser = argparse.ArgumentParser(description = 'Play Store Fetcher')
    parser.add_argument('-d', '--dbuser', action='store', required=True, help='Database user to use.')
    parser.add_argument('-n', '--dbname', action='store', required=True, help='Database name to use.')
    parser.add_argument('-a', '--androidid', action='store', required=True, help='Android ID to use.')
    parser.add_argument('-t', '--token', action='store', default="file:///etc/gpcrawl/token.dat", help='URL to fetch token from (may be file://)')
    parser.add_argument('-T', '--tor', action='store_true', help='Use Tor for download')
    parser.add_argument('-v', '--verbose', action='count', help='Verbose output')
    args = parser.parse_args()

    gp = GPDETAILS(args)
    gp.details()

if __name__ == '__main__':
    main()
