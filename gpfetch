#!/usr/bin/env python

import os
import sys
import time
import urllib2
import argparse
import psycopg2

sys.path.append ('googleplay_api')
from googleplay import GooglePlayAPI, LoginError

class GPFETCH:

    def __init__(self, args):

        self.__androidid = args.androidid
        self.__tokenurl  = args.token
        self.__directory = args.directory
        self.verbose   = args.verbose

        if args.tor:
            self.__proxies = { 'http': 'socks5://localhost:9050', 'https': 'socks5://localhost:9050' }
        else:
            self.__proxies = None

        self.login()

        self.__conn = psycopg2.connect('dbname=%s user=%s' % (args.dbname, args.dbuser))
        self.__cur = self.__conn.cursor()

        if not os.path.exists(self.__directory):
            os.makedirs(self.__directory)

    def login(self):

        self.__api = GooglePlayAPI(androidId = self.__androidid, lang = 'en_us', proxies = self.__proxies)

        if self.verbose:
            print ("[gpapi] Fetching token from '%s'" % (self.__tokenurl,))
        self.token = urllib2.urlopen(self.__tokenurl).read()
        if self.verbose:
            print ("[gpapi] Logging in with token '%s'" % (self.token))
        self.__api.login(None, None, self.token)


    def app_ids(self):

        self.__cur.execute('SELECT details_appdetails_packagename, details_appdetails_versioncode, details_appdetails_file_size FROM apps')
        return [(result[0], result[1], result[2]) for result in self.__cur.fetchall()]

    def fetchall(self):

        for (package, version, size) in self.app_ids():
            print("Downloading %s (%d bytes, v%d)" % (package, size, version))
            print(str(self.__api.details(package)))
            tmpfile = self.__directory + "/TEMP_%s.%d.apk" % (package, version)
            apkfile = self.__directory + "/%s.%d.apk" % (package, version)
            with open(tmpfile, 'wb') as f:
                while True:
                    try:
                        f.write(self.__api.download(package, version, progress_bar = self.verbose))
                        break
                    except IndexError:
                        sys.stdout.write('X')
                        sys.stdout.flush()
                        time.sleep(10)
                        self.login()
                os.rename(tmpfile, apkfile)

def main():

    parser = argparse.ArgumentParser(description = 'Play Store Fetcher')
    parser.add_argument('-D', '--directory', action='store', required=True, help='Store files to directory')
    parser.add_argument('-d', '--dbuser', action='store', required=True, help='Database user to use.')
    parser.add_argument('-n', '--dbname', action='store', required=True, help='Database name to use.')
    parser.add_argument('-a', '--androidid', action='store', required=True, help='Android ID to use.')
    parser.add_argument('-t', '--token', action='store', default="file:///etc/gpcrawl/token.dat", help='URL to fetch token from (may be file://)')
    parser.add_argument('-T', '--tor', action='store', help='Use Tor for download')
    parser.add_argument('-v', '--verbose', action='count', help='Verbose output')
    args = parser.parse_args()

    gp = GPFETCH(args)
    gp.fetchall()

if __name__ == '__main__':
    main()
