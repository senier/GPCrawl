#!/usr/bin/env python

import sys
from lxml import html
import requests
import time
from random import shuffle
import networkx as nx
import argparse

class Request:

    def __init__(self):

        self.__headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}

        self.__cache = set()

        self.__graph = nx.DiGraph()

    def bootstrap(self, infile):
        print ("Bootstrapping graph from %s" % (infile))
        with open(infile, 'r') as f:
            for node in set([x.strip() for x in f.readlines()]):
                self.__graph.add_node(node)

    def read(self, graph):
        print ("Reading graph from %s" % (graph))
        self.__graph = nx.read_adjlist(graph)
        print ("Read %d nodes" % (nx.number_of_nodes(self.__graph)))

    def write(self, graph):
        print ("Writing graph to %s" % (graph))
        nx.write_adjlist(self.__graph, graph)
        print ("Wrote %d nodes" % (nx.number_of_nodes(self.__graph)))

    def request(self, url):

        while True:
            try:
                return requests.get(url, headers=self.__headers)
            except KeyboardInterrupt: raise
            except:
                time.sleep(1)

    def similar(self, package):

        if package in self.__cache:
            return

        page = self.request('https://play.google.com/store/apps/details?id=%s' % (package))
        tree = html.fromstring(page.content)
        more = tree.cssselect('.see-more')
        if not more:
            print("No results")
            return

        moreurl = more[0].attrib['href']
        page = self.request('https://play.google.com/%s' % (moreurl))
        tree = html.fromstring(page.content)

        similar_packages = set([card.attrib['data-docid'] for card in tree.cssselect('.card')])
        nodes_before = nx.number_of_nodes(self.__graph)
        for similar_package in similar_packages:
            self.__graph.add_edge(package, similar_package)
        nodes_after = nx.number_of_nodes(self.__graph)
        new_nodes = nodes_after - nodes_before
        if new_nodes > 0:
            print(">>> %d new related packages, %d related packages, now at %d" % (new_nodes, len(similar_packages), nodes_after))

        # Add package to cache
        self.__cache.add(package)

    def extend (self):

        all_nodes = nx.nodes(self.__graph)

        pkg_curr = 1
        pkg_last = len(all_nodes)

        print ("Extending, %d nodes" % (pkg_last))

        for node in all_nodes.keys():
            # Skip nodes which already have similar packages
            if len(self.__graph.edges(nbunch=[node])) > 0:
                continue
            print('%d/%d (%2.1f%%), quering %s' % (pkg_curr, pkg_last, 100.0 * pkg_curr / pkg_last, node))
            pkg_curr += 1
            self.similar(node)

def main():

    parser = argparse.ArgumentParser(description = 'Play Store Website Crawler')
    parser.add_argument('-g', '--graph', action='store', required='True', help='Graph file')
    parser.add_argument('-b', '--bootstrap', action='store', help='Bootstrap list')
    args = parser.parse_args()

    r = Request()
    if args.bootstrap:
        r.bootstrap(args.bootstrap)
    else:
        r.read(args.graph)

    try:
        r.extend()
    finally:
        r.write(args.graph)

if __name__ == '__main__':
    main()
